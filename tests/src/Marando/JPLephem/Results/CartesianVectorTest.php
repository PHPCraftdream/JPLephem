<?php

namespace Marando\JPLephem\Results;

use \Marando\JPLephem\Results\CartesianVector as CV;
use \Marando\Units\Distance;
use \Marando\Units\Velocity;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-18 at 22:08:59.
 */
class CartesianVectorTest extends \PHPUnit_Framework_TestCase {

  /**
   * @covers Marando\JPLephem\Results\CartesianVector::aud
   */
  public function testAud() {
    $x  = Distance::au(1.4533423);
    $y  = Distance::au(3.5435433);
    $z  = Distance::au(0.0303243);
    $vx = Velocity::aud(1.4533423);
    $vy = Velocity::aud(3.5435433);
    $vz = Velocity::aud(0.0303243);

    $actual   = CV::aud($x->au, $y->au, $z->au, $vx->aud, $vy->aud, $vz->aud);
    $expected = (new CV($x, $y, $z, $vx, $vy, $vz))->setUnit('AU AU/d');

    $this->assertEquals($expected, $actual);
  }

  /**
   * @covers Marando\JPLephem\Results\CartesianVector::kmd
   */
  public function testKmd() {
    $x  = Distance::km(1.4533423);
    $y  = Distance::km(3.5435433);
    $z  = Distance::km(0.0303243);
    $vx = Velocity::kmd(1.4533423);
    $vy = Velocity::kmd(3.5435433);
    $vz = Velocity::kmd(0.0303243);

    $actual   = CV::kmd($x->km, $y->km, $z->km, $vx->kmd, $vy->kmd, $vz->kmd);
    $expected = (new CV($x, $y, $z, $vx, $vy, $vz))->setUnit('km km/d');

    $this->assertEquals($expected, $actual);
  }

  /**
   * @covers Marando\JPLephem\Results\CartesianVector::kms
   */
  public function testKms() {
    $x  = Distance::km(1.4533423);
    $y  = Distance::km(3.5435433);
    $z  = Distance::km(0.0303243);
    $vx = Velocity::kms(1.4533423);
    $vy = Velocity::kms(3.5435433);
    $vz = Velocity::kms(0.0303243);

    $actual   = CV::kms($x->km, $y->km, $z->km, $vx->kms, $vy->kms, $vz->kms);
    $expected = (new CV($x, $y, $z, $vx, $vy, $vz))->setUnit('km km/s');

    $this->assertEquals($expected, $actual);
  }

  /**
   * @covers Marando\JPLephem\Results\CartesianVector::add
   */
  public function testAdd() {
    $a = CV::aud(1.4, 2, -4, 1.2, 4, 12);
    $b = CV::aud(0.4, 3, 10, -12, 2, -5);
    $c = $a->add($b);

    $this->assertEquals(1.8, $c->x->au);
    $this->assertEquals(5, $c->y->au);
    $this->assertEquals(6, $c->z->au);
    $this->assertEquals(-10.8, $c->vx->aud);
    $this->assertEquals(6, $c->vy->aud);
    $this->assertEquals(7, $c->vz->aud);
  }

  /**
   * @covers Marando\JPLephem\Results\CartesianVector::subtract
   */
  public function testSubtract() {
    $a = CV::aud(1.4, 2, -4, 1.2, 4, 12);
    $b = CV::aud(0.4, 3, 10, -12, 2, -5);
    $c = $a->subtract($b);

    $this->assertEquals(1, $c->x->au);
    $this->assertEquals(-1, $c->y->au);
    $this->assertEquals(-14, $c->z->au);
    $this->assertEquals(13.2, $c->vx->aud);
    $this->assertEquals(2, $c->vy->aud);
    $this->assertEquals(17, $c->vz->aud);
  }

}
