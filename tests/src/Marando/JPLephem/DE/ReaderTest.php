<?php

namespace Marando\JPLephem\DE;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-04 at 00:39:45.
 */
class ReaderTest extends \PHPUnit_Framework_TestCase {

  public function testPositionSolarBary() {
    return;
    $de = new Reader();



    $ssb = $de->position(SSObj::SolarBary());

    $this->assertEquals([0, 0, 0, 0, 0, 0], $ssb);




    //$ssb = $de->position(SSObj::Moon());

    $ssb = $de->position(SSObj::Mars(), SSObj::Earth());
    var_dump($ssb);

    $ssb = $de->position(SSObj::Mars(), SSObj::Pluto());
    var_dump($ssb);

    $ssb = $de->jde(2451585)->position(SSObj::Mars(), SSObj::Pluto());
    var_dump($ssb);
  }

  public function testpo() {
    echo "\n";







    $limit = 200;
    $de    = new Reader(DE::DE421());

    $testpo = Reader::testpo(DE::DE421());
    $i      = 0;
    while ($testpo->valid()) {
      $testpo->next();
      $line = $testpo->splitCurrent(' ');

      if (count($line) != 7)
        continue;

      if ($i > $limit)
        break;

      $jde    = $line[2];
      $target = $line[3] != 3 ? new SSObj($line[3]) : SSObj::Earth();
      $center = $line[4] != 3 ? new SSObj($line[4]) : SSObj::Earth();
      $elem   = $line[5];
      $valExp = (float)$line[6];


      if ($target->id < 12 && $center->id < 12) {
        // Interpolate value
        $pv     = $de->jde($jde)->position($target, $center);
        $valAct = $pv[$elem - 1];

        $this->assertEquals($valExp, $valAct);

        $correct = $valAct == $valExp ? 'Y' : 'N';

        if (abs($valAct - $valExp) > 1e-13) {
          echo "\n{$jde}\tT={$target->id} C={$center->id} E=($elem)";
          echo "\n-- $valExp}\n++ {$valAct}\n";
        }
      }

      $i++;
    }

    echo "\n\n";
  }

  ///////
  //////////////
  ///////
  /////////////////////
  ///////

  /**
   * @covers Marando\JPLephem\DE\Reader::jde
   * @todo   Implement testJde().
   */
  public function testJde() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\JPLephem\DE\Reader::position
   * @todo   Implement testPosition().
   */
  public function testPosition() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\JPLephem\DE\Reader::observe
   * @todo   Implement testObserve().
   */
  public function testObserve() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\JPLephem\DE\Reader::interp
   * @todo   Implement testInterp().
   */
  public function testInterp() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\JPLephem\DE\Reader::__get
   * @todo   Implement test__get().
   */
  public function test__get() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

}
