<?php

namespace Marando\JPLephem;

use \Marando\JPLephem\Results\Nutation;
use \Marando\JPLephem\DE\DEReader;
use \Marando\JPLephem\DE\DEVer;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-18 at 23:49:46.
 */
class EarthTest extends \PHPUnit_Framework_TestCase {

  /**
   * @covers Marando\JPLephem\Earth::position
   */
  public function testPosition() {

    // Get the tests
    $testCount = 50;
    $tests     = DEReader::testpo(DEVer::DE421());

    $i = 0;
    foreach ($tests as $test) {
      if ($test->center > 11 || $test->target > 11)
        continue;

      if ($test->center != 3 /* && $test->target != 3 */)
        continue;

      // Test values
      $jde    = $test->jde;
      $target = $this->getPlanet($test->target);
      $center = $test->center;
      $e      = $test->element - 1;

      $result = null;
      if ($test->center == 3)
        $result = Earth::at($test->jde)->position($target);


      $coord = 0;
      if ($test->element == 1)
        $coord = $result->x->au;
      if ($test->element == 2)
        $coord = $result->y->au;
      if ($test->element == 3)
        $coord = $result->z->au;
      if ($test->element == 4)
        $coord = $result->vx->aud;
      if ($test->element == 5)
        $coord = $result->vy->aud;
      if ($test->element == 6)
        $coord = $result->vz->aud;

      // Prepare message of results
      $message = <<<MESSAGE
---------------------------------
     JDE: {$jde}
       T: {$target}
       C: Earth
Expected: $test->value
  Actual: $coord
---------------------------------
MESSAGE;


      // Assert the values match
      $this->assertTrue(abs($coord - $test->value) < 1e-9, $message);

      // Only run the define number of tests
      if ($i == $testCount)
        break;

      $i++;
    }


    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\JPLephem\Earth::nutation
   */
  public function testNutation() {
    $nu = Earth::at(2446895.500000)->nutations();

    $this->assertEquals(-3.788 / 3600, $nu->longitude->deg, 'Δψ', 1e-3);
    $this->assertEquals(+9.443 / 3600, $nu->obliquity->deg, 'Δε', 1e-3);
  }

  protected function getPlanet($id) {
    switch ($id) {
      case 1: return new Mercury;
      case 2: return new Venus;
      case 3: return new Earth;
      case 4: return new Mars;
      case 5: return new Jupiter;
      case 6: return new Saturn;
      case 7: return new Uranus;
      case 8: return new Neptune;
      case 9: return new Pluto;
      case 10: return new Moon;
      case 11: return new Sun;
    }
  }

}
