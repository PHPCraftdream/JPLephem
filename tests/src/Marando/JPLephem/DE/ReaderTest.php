<?php

namespace Marando\JPLephem\DE;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-04 at 00:39:45.
 */
class ReaderTest extends \PHPUnit_Framework_TestCase {
  ///////
  //////////////
  ///////
  /////////////////////
  ///////

  /**
   * @covers Marando\JPLephem\DE\Reader::jde
   * @todo   Implement testJde().
   */
  public function testJde() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\JPLephem\DE\Reader::position
   * @todo   Implement testPosition().
   */
  public function testPosition() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\JPLephem\DE\Reader::observe
   * @todo   Implement testObserve().
   */
  public function testObserve() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\JPLephem\DE\Reader::interp
   * @todo   Implement testInterp().
   */
  public function testInterp() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\JPLephem\DE\Reader::__get
   * @todo   Implement test__get().
   */
  public function test__get() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  //----------------------------------------------------------------------------
  // Functional Tests
  //----------------------------------------------------------------------------

  public function testpo() {
    // Define number of tests to run
    $testLimit = 100;

    // Create reader, and obtain testpo file reference
    $reader = new Reader(DE::DE421());
    $testpo = Reader::testpo(DE::DE421());

    // Seek initial test line
    $testpo->seek(8);

    // Iterate through each line in the testpo file
    for ($i = 0; $i < $testLimit; $i++) {
      // Read and split next line to array
      $testpo->next();
      $line = $testpo->splitCurrent(' ');

      // Check if array has the tests
      if (count($line) != 7)
        continue;

      // Parse out test values
      $jde    = $line[2];
      $target = $line[3];
      $center = $line[4];
      $elem   = $line[5];
      $valExp = (float)$line[6];

      // Only test Planets, Sun and Moon
      if ($target > 11 || $center > 11)
        continue;

      // Get SSObj instance for target & center
      $target = $target == 3 ? SSObj::Earth() : new SSObj($target);
      $center = $center == 3 ? SSObj::Earth() : new SSObj($center);

      // Interpolate position/velocity & grab test coordinate element
      $posvel = $reader->jde($jde)->position($target, $center);
      $valAct = $posvel[$elem - 1];

      $e = sprintf('%+11.13E', $valExp);
      $a = sprintf('%+11.13E', $valAct);
      echo "\n$target->id\t$center->id\t--- $e\n\t\t+++ $a\n";
      $this->assertEquals($valExp, $valAct);
    }

    echo "\n";
  }

}
